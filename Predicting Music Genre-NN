{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93dda01f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import matplotlib.pyplot as plt\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "57d37567",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_train = pd.read_csv('datasets/music_train.csv').drop(columns=['id'])\n",
    "# columnNames = [\"genre\",\"release_date\", \"dating\",\"violence\",\"world/life\",\"night/time\",\"shake the audience\",\"family/gospel\",\"romantic\",\"communication\",\"obscene\",\"music\",\"movement/places\",\"light/visual perceptions\",\"family/spiritual\",\"like/girls\",\"sadness\",\"feelings\",\"danceability\",\"loudness\",\"acousticness\",\"instrumentalness\",\"valence\",\"energy\",\"age\",\"topic\"]\n",
    "# df_train = df_train.reindex(columns = columnNames)\n",
    "# df_train.dropna(axis=0, how='all', subset=['topic'], inplace=True)\n",
    "# i=0\n",
    "# for (col, colValue) in df_train.iteritems():\n",
    "#     mean_val = df_train[col].mean()\n",
    "#     df_train[col].fillna(value=mean_val, inplace=True)\n",
    "\n",
    "# # print(df_train.iloc[:20,:])\n",
    "\n",
    "\n",
    "    \n",
    "# # scaler = preprocessing.MinMaxScaler(feature_range=(0,1))\n",
    "# # rescaleData = scaler.fit_transform(df_train)\n",
    "# # rescaleData = pd.DataFrame(rescaleData, index= df_train.index, columns=df_train.columns)\n",
    "\n",
    "# tmp1 = df_train.values\n",
    "# tmp1.shape\n",
    "\n",
    "# # tmp1 = preprocessing.scale(tmp1, axis=0)\n",
    "# # self.x_data = torch.from_numpy(tmp1[:, 1:])\n",
    "# # self.y_data = torch.from_numpy(tmp1[:,[0]])\n",
    "# # self.n_samples = tmp1.shape[0]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d709321e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MusicDataset(Dataset):\n",
    "    \n",
    "    def __init__(self):\n",
    "        df_train = pd.read_csv('datasets/music_train.csv').drop(columns=['id']).iloc[:13700,:]\n",
    "        columnNames = [\"genre\",\"release_date\", \"dating\",\"violence\",\"world/life\",\"night/time\",\"shake the audience\",\"family/gospel\",\"romantic\",\"communication\",\"obscene\",\"music\",\"movement/places\",\"light/visual perceptions\",\"family/spiritual\",\"like/girls\",\"sadness\",\"feelings\",\"danceability\",\"loudness\",\"acousticness\",\"instrumentalness\",\"valence\",\"energy\",\"age\",\"topic\"]\n",
    "        df_train = df_train.reindex(columns = columnNames)\n",
    "        df_train.dropna(axis=0, how='all', subset=['topic'], inplace=True)\n",
    "        i=0\n",
    "        for (col, colValue) in df_train.iteritems():\n",
    "            mean_val = df_train[col].mean()\n",
    "            df_train[col].fillna(value=mean_val, inplace=True)\n",
    "        \n",
    "    \n",
    "        tmp1 = df_train.values\n",
    "#         tmp1 = preprocessing.scale(tmp1, axis=0)\n",
    "        self.x_data = torch.from_numpy(tmp1[:, 1:])\n",
    "        self.y_data = torch.from_numpy(tmp1[:,0])\n",
    "        self.n_samples = tmp1.shape[0]\n",
    "        \n",
    "        \n",
    "    def __getitem__(self, index):\n",
    "        return self.x_data[index], self.y_data[index]\n",
    "    \n",
    "    \n",
    "    def __len__(self):\n",
    "        return self.n_samples\n",
    "        \n",
    "        \n",
    "\n",
    "        \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c0d88eda",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MusicTestDataset(Dataset):\n",
    "    \n",
    "    def __init__(self):\n",
    "        df_test = pd.read_csv('datasets/music_train.csv').drop(columns=['id']).iloc[13700:,:]\n",
    "        columnNames = [\"genre\",\"release_date\", \"dating\",\"violence\",\"world/life\",\"night/time\",\"shake the audience\",\"family/gospel\",\"romantic\",\"communication\",\"obscene\",\"music\",\"movement/places\",\"light/visual perceptions\",\"family/spiritual\",\"like/girls\",\"sadness\",\"feelings\",\"danceability\",\"loudness\",\"acousticness\",\"instrumentalness\",\"valence\",\"energy\",\"age\",\"topic\"]\n",
    "        df_test = df_test.reindex(columns = columnNames)\n",
    "        df_test.dropna(axis=0, how='all', subset=['topic'], inplace=True)\n",
    "        i=0\n",
    "        for (col, colValue) in df_test.iteritems():\n",
    "            mean_val = df_test[col].mean()\n",
    "            df_test[col].fillna(value=mean_val, inplace=True)\n",
    "        \n",
    "#         df_test = preprocessing.scale(df_test)\n",
    "    \n",
    "        tmp2 = df_test.values\n",
    "#         tmp2 = preprocessing.scale(tmp2, axis=0)\n",
    "        self.x_test_data = torch.from_numpy(tmp2[:, 1:])\n",
    "        self.y_test_data = torch.from_numpy(tmp2[:, 0])\n",
    "        self.n_test_samples = tmp2.shape[0]\n",
    "        \n",
    "        \n",
    "    def __getitem__(self, index):\n",
    "        return self.x_test_data[index], self.y_test_data[index]\n",
    "    \n",
    "    \n",
    "    def __len__(self):\n",
    "        return self.n_test_samples\n",
    "        \n",
    "        \n",
    "\n",
    "        \n",
    "        \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ad0d636",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = MusicDataset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea8c7bdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_loader = DataLoader(dataset=dataset, batch_size=200, shuffle=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "93597e98",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_dataset = MusicTestDataset()\n",
    "test_loader = DataLoader(dataset=test_dataset, batch_size=200, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e83eb7ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_size = 25\n",
    "learning_rate=0.01\n",
    "hidden_size1=50\n",
    "hidden_size2 = 100\n",
    "num_classes =7\n",
    "num_epochs = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c0a0be29",
   "metadata": {},
   "outputs": [],
   "source": [
    "class NeuralNet(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size1,hidden_size2, num_classes):\n",
    "        super(NeuralNet, self).__init__()\n",
    "        self.input_size = input_size\n",
    "        self.l1 = nn.Linear(input_size, hidden_size1)\n",
    "        self.relu = nn.ReLU()\n",
    "#         self.l2 = nn.Linear(hidden_size, num_classes)\n",
    "        self.l2 = nn.Linear(hidden_size1, hidden_size2)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.l3 = nn.Linear(hidden_size2, num_classes)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        out = self.l1(x)\n",
    "        out = self.relu(out)\n",
    "        out = self.l2(out)\n",
    "        out = self.relu(out)\n",
    "        out = self.l3(out)\n",
    "        \n",
    "        return out\n",
    "\n",
    "    \n",
    "model = NeuralNet(input_size, hidden_size1,hidden_size2 ,num_classes)\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "771652c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3f5b1f32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/2], Step [1/66], Loss: 62.2173\n",
      "Epoch [1/2], Step [11/66], Loss: 20.3162\n",
      "Epoch [1/2], Step [21/66], Loss: 5.5283\n",
      "Epoch [1/2], Step [31/66], Loss: 2.3901\n",
      "Epoch [1/2], Step [41/66], Loss: 1.9438\n",
      "Epoch [1/2], Step [51/66], Loss: 1.8637\n",
      "Epoch [1/2], Step [61/66], Loss: 1.8038\n",
      "Epoch [2/2], Step [1/66], Loss: 1.8409\n",
      "Epoch [2/2], Step [11/66], Loss: 1.8131\n",
      "Epoch [2/2], Step [21/66], Loss: 1.7892\n",
      "Epoch [2/2], Step [31/66], Loss: 1.8280\n",
      "Epoch [2/2], Step [41/66], Loss: 1.8466\n",
      "Epoch [2/2], Step [51/66], Loss: 1.8827\n",
      "Epoch [2/2], Step [61/66], Loss: 1.8024\n"
     ]
    }
   ],
   "source": [
    "# training the model\n",
    "n_total_steps = len(train_loader)\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    for i, (inputs, targets) in enumerate(train_loader):\n",
    "#         print(i)\n",
    "        outputs = model.forward(inputs.float())\n",
    "        targets= targets.long()\n",
    "                \n",
    "        loss = criterion(outputs, targets)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "#         print('hello')\n",
    "        \n",
    "        if (i) % 10 == 0:\n",
    "             print (f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{n_total_steps}], Loss: {loss.item():.4f}')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0054e9ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the network on the 10000 test images: 23.974025974025974\n"
     ]
    }
   ],
   "source": [
    "with torch.no_grad():\n",
    "    n_correct = 0\n",
    "    n_samples = 0\n",
    "    for inputs, labels in test_loader:\n",
    "        outputs = model.forward(inputs.float())\n",
    "        labels = labels.long()\n",
    "        \n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        n_samples+= labels.size(0)\n",
    "        n_correct+=(predicted == labels).sum().item()\n",
    "        \n",
    "        \n",
    "    acc = 100.0 * n_correct/ n_samples\n",
    "    print(f'Accuracy of the network on the 10000 test images: {acc}')\n",
    "        \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49abd1dd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
